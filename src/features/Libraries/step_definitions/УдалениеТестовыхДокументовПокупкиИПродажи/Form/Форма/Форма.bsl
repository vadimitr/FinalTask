//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетДокументПокупкиСКомментарием(КомментарийДокумента)","СуществуетДокументПокупкиСКомментарием","Допустим существует документ покупки с комментарием ""#тестовый документ""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СНомеромДокумента(НомерДокумента)","СНомеромДокумента","И с номером документа ""000000001""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетДокументПродажиСКомментарием(КомментарийДокумента)","СуществуетДокументПродажиСКомментарием","Допустим существует документ продажи с комментарием ""#тестовый документ""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетДокументПокупкиСКомментарием(Парам01)","СуществуетДокументПокупкиСКомментарием","Допустим существует документ покупки с комментарием ""#тестовый документ""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СНомеромДокумента(Парам01)","СНомеромДокумента","И с номером документа ""000000001""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УДокументаПокупкиПометкаУдалениеДолжнаСтатьИстина()","УДокументаПокупкиПометкаУдалениеДолжнаСтатьИстина","Тогда у документа покупки пометка удаление должна стать Истина");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетДокументПродажиСКомментарием(Парам01)","СуществуетДокументПродажиСКомментарием","Допустим существует документ продажи с комментарием ""#тестовый документ""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СКонтрагентом(Парам01)","СКонтрагентом","И с Контрагентом ""ООО Новый""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УДокументаПродажиПометкаУдалениеДолжнаСтатьИстина()","УДокументаПродажиПометкаУдалениеДолжнаСтатьИстина","Тогда у документа продажи пометка удаление должна стать Истина");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

&НаСервере
Функция УстановитьПометкуУдаленияДокумента(ТипДокумента, НомерДокумента, КомментарийДокумента = "#тестовый документ") Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК ДокументСсылка,
	|	ТаблицаДокументов.ПометкаУдаления КАК ЗначениеПометкиУдаления
	|ИЗ
	|	Документ."+ ТипДокумента +"  КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Номер = &НомерДокумента
	|	И ТаблицаДокументов.Комментарий = &КомментарийДокумента");
	
	Запрос.УстановитьПараметр("НомерДокумента", СокрЛП(НомерДокумента));
	Запрос.УстановитьПараметр("КомментарийДокумента", СокрЛП(КомментарийДокумента));
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда
		ВызватьИсключение  ТипДокумента + " " + НомерДокумента + " не найден";
	КонецЕсли;		
	
	Выборка = Результат.Выбрать();
	//Выборка.Следующий();
	//ЗначениеПометкиУдаления = Ложь;	
	Пока Выборка.Следующий() Цикл
		ЗначениеПометкиУдаления = Выборка.ЗначениеПометкиУдаления;	
		Если Не ЗначениеПометкиУдаления Тогда	
			ДокОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();       
			//Попытка
				ДокОбъект.УстановитьПометкуУдаления(Истина);
				ЗначениеПометкиУдаления = Истина;
				//ВызватьИсключение ОписаниеОшибки();
			//Исключение
			//КонецПопытки;		
		КонецЕсли;			
	КонецЦикла;
	
	Возврат ЗначениеПометкиУдаления;
КонецФункции


///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим существует документ покупки с комментарием "#тестовый документ"
//@СуществуетДокументПокупкиСКомментарием(Парам01)
Процедура СуществуетДокументПокупкиСКомментарием(КомментарийДокумента) Экспорт
	Контекст.Вставить("КомментарийДокумента", КомментарийДокумента);
	Контекст.Вставить("ТипДокумента", "ПоступлениеТоваровУслуг");
	Ванесса.ПосмотретьЗначение(КомментарийДокумента,Истина);
КонецПроцедуры

&НаКлиенте
//И с номером документа "000000001"
//@СНомеромДокумента(Парам01)
Процедура СНомеромДокумента(НомерДокумента) Экспорт
	Контекст.Вставить("НомерДокумента", НомерДокумента);
	Ванесса.ПосмотретьЗначение(НомерДокумента,Истина);
КонецПроцедуры

&НаКлиенте
//Тогда у документа покупки пометка удаление должна стать Истина
//@УДокументаПокупкиПометкаУдалениеДолжнаСтатьИстина()
Процедура УДокументаПокупкиПометкаУдалениеДолжнаСтатьИстина() Экспорт
	Результат = УстановитьПометкуУдаленияДокумента(Контекст.ТипДокумента, Контекст.НомерДокумента, Контекст.КомментарийДокумента);
	Ванесса.ПосмотретьЗначение(Результат,Истина);
	Если Не Результат Тогда
		ВызватьИсключение  "Для документа " + Контекст.ТипДокумента +" " + Контекст.НомерДокумента + " не удалось установить пометку удаления";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//Допустим существует документ продажи с комментарием "#тестовый документ"
//@СуществуетДокументПродажиСКомментарием(Парам01)
Процедура СуществуетДокументПродажиСКомментарием(КомментарийДокумента) Экспорт
 	Контекст.Вставить("КомментарийДокумента", КомментарийДокумента);
	Контекст.Вставить("ТипДокумента", "РеализацияТоваровУслуг");
	Ванесса.ПосмотретьЗначение(КомментарийДокумента,Истина);
КонецПроцедуры

&НаКлиенте
//Тогда у документа продажи пометка удаление должна стать Истина
//@УДокументаПродажиПометкаУдалениеДолжнаСтатьИстина()
Процедура УДокументаПродажиПометкаУдалениеДолжнаСтатьИстина() Экспорт
	Результат = УстановитьПометкуУдаленияДокумента(Контекст.ТипДокумента, Контекст.НомерДокумента, Контекст.КомментарийДокумента);
	Ванесса.ПосмотретьЗначение(Результат,Истина);
	Если Не Результат Тогда
		ВызватьИсключение  "Для документа " + Контекст.ТипДокумента +" " + Контекст.НомерДокумента + " не удалось установить пометку удаления";
	КонецЕсли;
КонецПроцедуры

//окончание текста модуля

